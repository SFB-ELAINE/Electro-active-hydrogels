from __future__ import print_function
from dolfin import *
import numpy as np
import matplotlib.pyplot as plt
import dolfin as d
import sys
import os.path

from timeit import default_timer as timer
startime = timer() 

#d.parameters["refinement_algorithm"] = "plaza_with_parent_facets"

meshpath = 'Circular/'
if len(sys.argv) > 1:
    meshname = sys.argv[1]
else:
    meshname = 'Mesh_1'
# meshname = meshname + "_refined"
mesh_file = meshpath + meshname + '.xml'
if not os.path.isfile(mesh_file):
    print("Specify correct name for meshfile!")
    sys.exit(0)
facet_regs = meshpath + meshname + '_facet_region.xml'
phys_regs = meshpath + meshname + '_physical_region.xml'
#datafile = open('TemperatureDevelopment_test.dat', 'w')

mesh = d.Mesh(mesh_file)
facets_imported = d.MeshFunction('size_t', mesh, facet_regs)
cells_imported = d.MeshFunction('size_t', mesh, phys_regs)
#d.File('mesh_orig.pvd') << mesh
"""
1 1 "interface"
1 2 "right"
1 3 "bottom"
1 4 "top"
1 6 "left"
2 5 "solution"
2 7 "hydrogel"

"""
D_an = d.Constant(1.0E-7) # m^2/s
D_ca = d.Constant(1.0E-7) # m^2/s
mu_an = d.Constant(3.9607E-6) # m^2/s*V
mu_ca = d.Constant(3.9607E-6) # m^2/s*V
z_an = d.Constant(-1.0)
z_ca = d.Constant(1.0)
z_fc = d.Constant(-1.0)
Farad = d.Constant(9.6487E4) # C/mol
eps0 = d.Constant(8.854E-12) # As/Vm
epsR = d.Constant(100.0)
Temp = d.Constant(293.0)
R = d.Constant(8.3143)
#Lame_Constant = d.Constant(1.2E5) # Pa - 3*lambda+2*mu

P1 = d.FiniteElement('P', 'triangle', 2)
element = d.MixedElement([P1, P1, P1])
ME = d.FunctionSpace(mesh, element)

subdomains = d.MeshFunction("size_t", mesh, 2)
subdomains.set_all(0)

subdomains.array()[cells_imported.array() == 7] = 1          
#subdomain.mark(subdomains, 1)

fc = d.Constant(2.0) # FCD
V0_r = d.FunctionSpace(mesh, 'DG', 0)
fc_function = d.Function(V0_r)
fc_val = [0.0, fc]

help = np.asarray(subdomains.array(), dtype = np.int32)
fc_function.vector()[:] = np.choose(help, fc_val)
zeroth = d.plot(fc_function, title = "Fixed charge density, $c^f$")
plt.colorbar(zeroth)
plt.xlim(0.0, 15.0)
plt.xticks([0.0, 5.0, 10.0, 15.0])
plt.ylim(0.0, 15.0)
plt.yticks([0.0, 5.0, 10.0, 15.0])
plt.show()

Sol_c = d.Constant(1.0)
Poten = 50.0E-3

l_bc_an = d.DirichletBC(ME.sub(0), Sol_c, facets_imported, 6)
r_bc_an = d.DirichletBC(ME.sub(0), Sol_c, facets_imported, 2)

l_bc_ca = d.DirichletBC(ME.sub(1), Sol_c, facets_imported, 6)
r_bc_ca = d.DirichletBC(ME.sub(1), Sol_c, facets_imported, 2)

l_bc_psi = d.DirichletBC(ME.sub(2), -Poten, facets_imported, 6)
r_bc_psi = d.DirichletBC(ME.sub(2), Poten, facets_imported, 2)

bcs = [l_bc_an, r_bc_an, l_bc_ca, r_bc_ca, l_bc_psi, r_bc_psi]

u = d.Function(ME)

#=============================================================================#
V = d.FunctionSpace(mesh, P1)

dofmap = V.dofmap()
o0_dofs = []
o1_dofs = []

for cell in cells(mesh): # compute dofs in the domains
    if cells_imported[cell] == 7:
        o0_dofs.extend(dofmap.cell_dofs(cell.index()))
    else:
        o1_dofs.extend(dofmap.cell_dofs(cell.index()))
        
o0_dofs = list(set(o0_dofs))
o1_dofs = list(set(o1_dofs))

u_hydr_an = d.interpolate(d.Constant(0.4142), V)
u_sol_an = d.interpolate(Sol_c, V)
u_hydr_ca = d.interpolate(d.Constant(2.4142), V)
u_sol_ca = d.interpolate(Sol_c, V)
u_hydr_psi = d.interpolate(d.Constant(-22.252E-3), V)
u_sol_psi = d.interpolate(d.Constant(0.0), V)

u1 = d.Function(V)
u2 = d.Function(V)
u3 = d.Function(V)

u1.vector()[o0_dofs] = u_hydr_an.vector()[o0_dofs]
u1.vector()[o1_dofs] = u_sol_an.vector()[o1_dofs]
u2.vector()[o0_dofs] = u_hydr_ca.vector()[o0_dofs]
u2.vector()[o1_dofs] = u_sol_ca.vector()[o1_dofs]   
u3.vector()[o0_dofs] = u_hydr_psi.vector()[o0_dofs]
u3.vector()[o1_dofs] = u_sol_psi.vector()[o1_dofs]

d.assign(u.sub(0), u1)
d.assign(u.sub(1), u2)
d.assign(u.sub(2), u3)
#=============================================================================#

dx = d.dx
an, ca, psi = d.split(u)

du = d.TrialFunction(ME)
van, vca, vpsi = d.TestFunctions(ME)

Fan = D_an*(-d.inner(d.grad(an), d.grad(van))*dx - Farad / R / Temp * z_an*an*d.inner(d.grad(psi), d.grad(van))*dx)
Fca = D_ca*(-d.inner(d.grad(ca), d.grad(vca))*dx - Farad / R / Temp * z_ca*ca*d.inner(d.grad(psi), d.grad(vca))*dx)
Fpsi = d.inner(d.grad(psi), d.grad(vpsi))*dx - (Farad/(eps0*epsR))*(z_an*an + z_ca*ca + z_fc*fc_function)*vpsi*dx

F = Fpsi + Fan + Fca

J = d.derivative(F, u)
problem = d.NonlinearVariationalProblem(F, u, bcs = bcs, J = J)
solver = d.NonlinearVariationalSolver(problem)
prm = solver.parameters

info(prm, True)

prm['newton_solver']['linear_solver'] = 'mumps'
solver.solve()

#########################  Post - Processing  #################################
aftersolveT = timer() 

an, ca, psi = u.split()

first = d.plot(an, title = "Anion concentration, $c^-$")
plt.colorbar(first, format='%3.3f')
plt.xticks([0.0, 5.0, 10.0, 15.0])
plt.yticks([0.0, 5.0, 10.0, 15.0])
plt.xlabel('x (mm)')
plt.ylabel('y (mm)')
plt.show()

second = d.plot(ca, title = "Cation concentration, $c^+$")
plt.colorbar(second, format='%3.3f')
plt.xticks([0.0, 5.0, 10.0, 15.0])
plt.yticks([0.0, 5.0, 10.0, 15.0])
plt.xlabel('x (mm)')
plt.ylabel('y (mm)')

plt.show()
third = d.plot(psi, title = "Electric Potential, $\psi$")
plt.colorbar(third, format='%3.3f')
plt.xticks([0.0, 5.0, 10.0, 15.0])
plt.yticks([0.0, 5.0, 10.0, 15.0])
plt.xlabel('x (mm)')
plt.ylabel('y (mm)')
plt.show()

d.File('an_ES.pvd') << an
d.File('ca_ES.pvd') << ca
d.File('psi_ES.pvd') << psi

totime = aftersolveT - startime

print("Number of DOFs: {}".format(ME.dim()))
print("Total time for Simulation : " + str(round(totime)) + "s")
